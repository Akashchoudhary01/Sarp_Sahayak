import { useState } from 'react';

import { Camera, Upload, AlertCircle } from 'lucide-react';



export default function SnakeIdentificationStep({ language, onIdentified }) {

  const [selectedImage, setSelectedImage] = useState(null);

  const [analyzing, setAnalyzing] = useState(false);

  const [aiResult, setAiResult] = useState(null);

  const [manualSelection, setManualSelection] = useState(null);



  const snakeOptions = [

    { value: 'cobra', label: 'Cobra', labelHi: 'рдХреЛрдмрд░рд╛' },

    { value: 'krait', label: 'Krait', labelHi: 'рдХрд░реИрдд' },

    { value: 'viper', label: 'Viper', labelHi: 'рд╡рд╛рдЗрдкрд░' },

    { value: 'non-venomous', label: 'Non-Venomous', labelHi: 'рдЧреИрд░-рд╡рд┐рд╖реИрд▓рд╛' },

    { value: 'unknown', label: 'Unknown/Skip', labelHi: 'рдЕрдЬреНрдЮрд╛рдд/рдЫреЛрдбрд╝реЗрдВ' }

  ];



  const handleImageUpload = (event) => {

    const file = event.target.files?.[0];

    if (file) {

      const reader = new FileReader();

      reader.onloadend = () => {

        setSelectedImage(reader.result);

        setAnalyzing(true);



        setTimeout(() => {

          const results = ['cobra', 'krait', 'viper', 'non-venomous', 'unknown'];

          const randomResult = results[Math.floor(Math.random() * results.length)];

          setAiResult(randomResult);

          setAnalyzing(false);

        }, 2000);

      };

      reader.readAsDataURL(file);

    }

  };



  const handleManualSelect = (snakeType) => {

    setManualSelection(snakeType);

  };



  const handleProceed = () => {

    const finalSelection = manualSelection || aiResult || 'unknown';

    onIdentified(finalSelection);

  };



  return (

    <div className="px-6 py-8 space-y-6">

      <div className="bg-yellow-50 border-2 border-yellow-400 rounded-lg p-4 flex items-start">

        <AlertCircle className="text-yellow-600 mr-3 flex-shrink-0 mt-1" size={24} />

        <div>

          <p className="font-bold text-gray-800 text-sm">

            {language === 'en' ? 'Step 1: Identify the Snake' : 'рдЪрд░рдг 1: рд╕рд╛рдВрдк рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ'}

          </p>

          <p className="text-sm text-gray-600 mt-1">

            {language === 'en'

              ? 'Upload a photo or manually select the snake type'

              : 'рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдпрд╛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рд╕рд╛рдВрдк рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ'}

          </p>

        </div>

      </div>



      {selectedImage && (

        <div className="bg-gray-100 rounded-lg p-4">

          <img

            src={selectedImage}

            alt="Snake"

            className="w-full h-64 object-cover rounded-lg mb-4"

          />

          {analyzing && (

            <div className="text-center">

              <div className="inline-block animate-spin rounded-full h-8 w-8 border-4 border-red-600 border-t-transparent"></div>

              <p className="mt-2 text-gray-700 font-semibold">

                {language === 'en' ? 'AI Analyzing...' : 'AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ...'}

              </p>

            </div>

          )}

          {!analyzing && aiResult && (

            <div className="bg-blue-50 border-2 border-blue-400 rounded-lg p-4">

              <p className="font-bold text-gray-800">

                {language === 'en' ? 'ЁЯдЦ AI Suggestion: ' : 'ЁЯдЦ AI рд╕реБрдЭрд╛рд╡: '}

                {snakeOptions.find(s => s.value === aiResult)?.[language === 'en' ? 'label' : 'labelHi']}

              </p>

              <p className="text-sm text-gray-600 mt-1">

                {language === 'en'

                  ? 'Please verify or select manually below'

                  : 'рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ рдпрд╛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдЪреБрдиреЗрдВ'}

              </p>

            </div>

          )}

        </div>

      )}



      {!selectedImage && (

        <div className="space-y-4">

          <label className="block">

            <input

              type="file"

              accept="image/*"

              capture="environment"

              onChange={handleImageUpload}

              className="hidden"

            />

            <div className="w-full bg-yellow-500 hover:bg-yellow-600 text-gray-900 font-bold py-5 px-6 rounded-lg shadow-md active:scale-95 transition-transform cursor-pointer text-center flex items-center justify-center">

              <Camera className="mr-2" size={24} />

              {language === 'en' ? 'ЁЯУ╕ Take Photo' : 'ЁЯУ╕ рдлреЛрдЯреЛ рд▓реЗрдВ'}

            </div>

          </label>



          <label className="block">

            <input

              type="file"

              accept="image/*"

              onChange={handleImageUpload}

              className="hidden"

            />

            <div className="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-5 px-6 rounded-lg shadow-md active:scale-95 transition-transform cursor-pointer text-center flex items-center justify-center">

              <Upload className="mr-2" size={24} />

              {language === 'en' ? 'Upload Photo' : 'рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ'}

            </div>

          </label>

        </div>

      )}



      <div className="border-t-2 border-gray-200 pt-6">

        <h3 className="font-bold text-gray-800 mb-3">

          {language === 'en' ? 'Manual Selection:' : 'рдореИрдиреБрдЕрд▓ рдЪрдпрди:'}

        </h3>

        <div className="space-y-2">

          {snakeOptions.map((option) => (

            <button

              key={option.value}

              onClick={() => handleManualSelect(option.value)}

              className={`w-full text-left px-4 py-3 rounded-lg border-2 font-semibold transition-all ${

                manualSelection === option.value

                  ? 'bg-red-600 text-white border-red-700'

                  : 'bg-white text-gray-800 border-gray-300 hover:border-gray-400'

              }`}

            >

              {language === 'en' ? option.label : option.labelHi}

            </button>

          ))}

        </div>

      </div>



      <button

        onClick={handleProceed}

        disabled={!aiResult && !manualSelection}

        className={`w-full font-bold py-4 px-6 rounded-lg shadow-lg transition-all ${

          aiResult || manualSelection

            ? 'bg-red-600 hover:bg-red-700 text-white active:scale-95'

            : 'bg-gray-300 text-gray-500 cursor-not-allowed'

        }`}

      >

        {language === 'en' ? 'тЮбя╕П Continue to First Aid' : 'тЮбя╕П рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рдЬрд╛рд░реА рд░рдЦреЗрдВ'}

      </button>

    </div>

  );

}